package discordClient

import (
	"fmt"
	"github.com/bwmarrin/discordgo"
	"time"
)

const (
	emOK      = "‚úÖ"
	emCancel  = "‚ùé"
	emRsStart = "üöÄ"
	emPl30    = "‚åõ"
	emPlus    = "‚ûï"
	emMinus   = "‚ûñ"
)

var mesContentNil string

type Ds struct {
	d discordgo.Session
}

type DiscordInterface interface {
	Send(chatid, text string) string
	SendChannelDelSecond(chatid, text string, second int)
	SendComplexContent(chatid, text string) string
	EditComplex(dsmesid, dschatid string, Embeds *discordgo.MessageEmbed)
	DeleteMesageSecond(chatid, mesid string, second int)
	DeleteMessage(chatid, mesid string)
	RoleToIdPing(rolePing, guildid string) string
	AddEnojiRsQueue(chatid, mesid string)
	CheckAdmin(nameid string, chatid string) bool
	BotName() string
}

func EmbedDS(name1, name2, name3, name4, lvlkz string, numkz int) discordgo.MessageEmbed {
	Embeds := &discordgo.MessageEmbed{
		Author: &discordgo.MessageEmbedAuthor{},
		Color:  16711680,
		Description: fmt.Sprintf("–ñ–µ–ª–∞—é—â–∏–µ:üëá |  <:rs:918545444425072671> –Ω–∞ %s (%d) ", lvlkz, numkz) +
			fmt.Sprintf(
				"\n1Ô∏è‚É£ %s "+
					"\n2Ô∏è‚É£ %s "+
					"\n3Ô∏è‚É£ %s "+
					"\n4Ô∏è‚É£ %s "+
					"\n", name1, name2, name3, name4),

		Fields: []*discordgo.MessageEmbedField{
			&discordgo.MessageEmbedField{
				Name:   fmt.Sprintf(" %s –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –æ—á–µ—Ä–µ–¥—å\n%s –¥–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ –æ—á–µ—Ä–µ–¥–∏\n%s –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π —Å—Ç–∞—Ä—Ç", emOK, emCancel, emRsStart),
				Value:  "–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã: ",
				Inline: true,
			}},
		Timestamp: time.Now().Format(time.RFC3339), // –¢–ï–ö–£–©–ï–ï –í–†–ï–ú–Ø –î–ò–°–ö–û–†–î–ê
		Title:     "–û–ß–ï–†–ï–î–¨ –ö–ó  ",
	}
	return *Embeds
}

func (d *Ds) CheckAdmin(nameid string, chatid string) bool {
	perms, err := d.d.UserChannelPermissions(nameid, chatid)
	if err != nil {
		fmt.Println("–æ—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω –ª–∏ ", err)
	}
	if perms&discordgo.PermissionAdministrator != 0 {
		//logrus.Println("–∞–¥–º–∏–Ω")
		return true
	} else {
		//logrus.Println("–Ω–µ –∞–¥–º–∏–Ω")
		return false
	}
}
func (d *Ds) AddEnojiRsQueue(chatid, mesid string) {
	d.d.MessageReactionAdd(chatid, mesid, emOK)
	d.d.MessageReactionAdd(chatid, mesid, emCancel)
	d.d.MessageReactionAdd(chatid, mesid, emRsStart)
	d.d.MessageReactionAdd(chatid, mesid, emPl30)

}
func (d *Ds) DeleteMessage(chatid, mesid string) {
	d.d.ChannelMessageDelete(chatid, mesid)
}
func (d *Ds) SendChannelDelSecond(chatid, text string, second int) {
	message, err := d.d.ChannelMessageSend(chatid, text)
	if err != nil {
		fmt.Println("–æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è SendChannelDelSecond", err)
	}
	go func() {
		time.Sleep(time.Duration(second) * time.Second)
		d.d.ChannelMessageDelete(chatid, message.ID)
	}()

}
func (d *Ds) RoleToIdPing(rolePing, guildid string) string {
	//—Å–æ–∑–¥–∞—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
	rolPing := "–∫–∑" + rolePing // –¥–æ–±–∞–≤–ª—è—é –±—É–∫–≤—ã
	g, err := d.d.Guild(guildid)
	if err != nil {
		fmt.Println("–æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≥–∏–ª—å–¥–∏–∏ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–æ–ª–∏", err)
	}
	exist, role := d.roleExists(g, rolPing)
	if !exist {
		//—Å–æ–∑–¥–∞–µ–º —Ä–æ–ª—å –∏ –≤–æ–∑–≤—Ä–∞—à–∞–µ–º –ø–∏–Ω–≥
		newRole, err := d.d.GuildRoleCreate(guildid)
		if err != nil {
			fmt.Println("–æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ–π —Ä–æ–ª–∏ ", err)
		}
		role, err = d.d.GuildRoleEdit(guildid, newRole.ID, rolPing, newRole.Color, newRole.Hoist, 37080064, true)
		if err != nil {
			fmt.Println("–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–æ–≤–æ–π —Ä–æ–ª–∏", err)
			err = d.d.GuildRoleDelete(guildid, newRole.ID)
			if err != nil {
				fmt.Println("–æ—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π —Ä–æ–ª–∏ ", err)
			}
		}
		return role.Mention()
	} else {
		return role.Mention()
	}

	r, err := d.d.GuildRoles(guildid)
	if err != nil {
		fmt.Println("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ä–æ–ª–µ–π ", err)
	}
	l := len(r) // –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–æ–ª–µ–π –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
	i := 0
	for i < l { //–∏—â—É —Ä–æ–ª–∏ –≤ —Ü–∏–∫–ª–µ
		if r[i].Name == rolPing {
			//pingId = r[i].ID
			return r[i].Mention()
			//return "<@&" + pingId + ">" // –≤–æ–∑–≤—Ä–∞—â–∞—é –ø–∏–Ω–≥ —Ä–æ–ª–∏
		} else {
			i = i + 1 // –ø—Ä–æ–¥–æ–ª–∂–∞—é –ø–µ—Ä–µ–±–æ—Ä
		}
	}
	return "(—Ä–æ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞)" // –µ—Å–ª–∏ –Ω–µ –Ω–∞—à–æ–ª –Ω—É–∂–Ω–æ–π —Ä–æ–ª–∏
}
func (d *Ds) DeleteMesageSecond(chatid, mesid string, second int) {
	if second > 60 {
		//timerInsert(mesid, chatid, 0, 0, second)
	} else {
		go func() {
			time.Sleep(time.Duration(second) * time.Second)
			d.d.ChannelMessageDelete(chatid, mesid)
		}()
	}

}
func (d *Ds) EditComplex(dsmesid, dschatid string, Embeds *discordgo.MessageEmbed) {
	a := &discordgo.MessageEdit{
		Content: &mesContentNil,
		Embed:   Embeds,
		ID:      dsmesid,
		Channel: dschatid,
	}
	_, err := d.d.ChannelMessageEditComplex(a)
	if err != nil {
		fmt.Println("–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è ", err)
	}
}
func (d *Ds) BotName() string { //–ø–æ–ª—É—á–∞–µ–º –∏–º—è –±–æ—Ç–∞
	u, _ := d.d.User("@me")
	return u.Username
}
func (d *Ds) SendComplexContent(chatid, text string) string { //–æ—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
	mesCompl, err := d.d.ChannelMessageSendComplex(chatid, &discordgo.MessageSend{
		Content: text})
	if err != nil {
		fmt.Println("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è ", err)
	}
	return mesCompl.ID
}
func (d *Ds) Send(chatid, text string) string { //–æ—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞
	message, err := d.d.ChannelMessageSend(chatid, text)
	if err != nil {
		fmt.Println("–æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ–∫—Å—Ç–∞ ", err)
	}
	return message.ID
}
