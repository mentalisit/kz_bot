package discordClient

import (
	"fmt"
	"time"

	"github.com/bwmarrin/discordgo"
)

const (
	emOK      = "‚úÖ"
	emCancel  = "‚ùé"
	emRsStart = "üöÄ"
	emPl30    = "‚åõ"
	emPlus    = "‚ûï"
	emMinus   = "‚ûñ"
)

var mesContentNil string

type Ds interface {
	Send(chatid, text string) string
	SendChannelDelSecond(chatid, text string, second int)
	SendComplexContent(chatid, text string) string
	SendEmbedText(chatid, title, text string) *discordgo.Message
	SendComplex(chatid string, embeds discordgo.MessageEmbed) string
	EditComplex(dsmesid, dschatid string, Embeds discordgo.MessageEmbed)
	DeleteMesageSecond(chatid, mesid string, second int)
	DeleteMessage(chatid, mesid string)
	RoleToIdPing(rolePing, guildid string) string
	Subscribe(nameid, argRoles, guildid string) string
	Unsubscribe(nameid, argRoles, guildid string) string
	AddEnojiRsQueue(chatid, mesid string)
	CheckAdmin(nameid string, chatid string) bool
	BotName() string
	EmbedDS(name1, name2, name3, name4, lvlkz string, numkz int) discordgo.MessageEmbed
	EditMessage(chatID, messageID, content string)
	SendEmbedTime(chatid, text string) string
	Help(Channel string)
	Autohelp()
}

func (d *Discord) EmbedDS(name1, name2, name3, name4, lvlkz string, numkz int) discordgo.MessageEmbed {
	Embeds := &discordgo.MessageEmbed{
		Author: &discordgo.MessageEmbedAuthor{},
		Color:  16711680,
		Description: fmt.Sprintf("–ñ–µ–ª–∞—é—â–∏–µ:üëá |  <:rs:918545444425072671> –Ω–∞ %s (%d) ", lvlkz, numkz) +
			fmt.Sprintf(
				"\n1Ô∏è‚É£ %s "+
					"\n2Ô∏è‚É£ %s "+
					"\n3Ô∏è‚É£ %s "+
					"\n4Ô∏è‚É£ %s "+
					"\n", name1, name2, name3, name4),

		Fields: []*discordgo.MessageEmbedField{
			&discordgo.MessageEmbedField{
				Name:   fmt.Sprintf(" %s –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –æ—á–µ—Ä–µ–¥—å\n%s –¥–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ –æ—á–µ—Ä–µ–¥–∏\n%s –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π —Å—Ç–∞—Ä—Ç", emOK, emCancel, emRsStart),
				Value:  "–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã: ",
				Inline: true,
			}},
		Timestamp: time.Now().Format(time.RFC3339), // –¢–ï–ö–£–©–ï–ï –í–†–ï–ú–Ø –î–ò–°–ö–û–†–î–ê
		Title:     "–û–ß–ï–†–ï–î–¨ –ö–ó  ",
	}
	return *Embeds
}
func (d *Discord) SendEmbedText(chatid, title, text string) *discordgo.Message {
	Emb := &discordgo.MessageEmbed{
		Author:      &discordgo.MessageEmbedAuthor{},
		Color:       16711680,
		Description: text,
		Title:       title,
	}
	m, err := d.d.ChannelMessageSendEmbed(chatid, Emb)
	if err != nil {
		d.log.Println("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ –≤—Å—Ç–∞–≤–∫–æ–π ", err)
	}
	return m
}
func (d *Discord) CheckAdmin(nameid string, chatid string) bool {
	perms, err := d.d.UserChannelPermissions(nameid, chatid)
	if err != nil {
		d.log.Println("–æ—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω –ª–∏ ", err)
	}
	if perms&discordgo.PermissionAdministrator != 0 {
		return true
	} else {
		return false
	}
}
func (d *Discord) AddEnojiRsQueue(chatid, mesid string) {
	err := d.d.MessageReactionAdd(chatid, mesid, emOK)
	if err != nil {
		d.log.Println("–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–µ–∞–∫—Ü–∏–∏ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è "+emOK, err)
	}
	err = d.d.MessageReactionAdd(chatid, mesid, emCancel)
	if err != nil {
		d.log.Println("–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–µ–∞–∫—Ü–∏–∏ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è "+emCancel, err)
	}
	err = d.d.MessageReactionAdd(chatid, mesid, emRsStart)
	if err != nil {
		d.log.Println("–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–µ–∞–∫—Ü–∏–∏ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è "+emRsStart, err)
	}
	err = d.d.MessageReactionAdd(chatid, mesid, emPl30)
	if err != nil {
		d.log.Println("–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–µ–∞–∫—Ü–∏–∏ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è "+emPl30, err)
	}

}
func (d *Discord) DeleteMessage(chatid, mesid string) {
	_ = d.d.ChannelMessageDelete(chatid, mesid)
	//–Ω–∞–¥–æ —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –∫–∞–∫ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—à–∏–±–∫—É —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
	//if err != nil {d.log.Println("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –¥–∏—Å–∫–æ—Ä–¥ —Å–æ–æ–±—â–µ–Ω–∏—è ", chatid, mesid, err)}
}
func (d *Discord) SendChannelDelSecond(chatid, text string, second int) {
	if text != "" {
		message, err := d.d.ChannelMessageSend(chatid, text)
		if err != nil {
			d.log.Println("–æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è SendChannelDelSecond", err)
		}
		if second <= 60 {
			go func() {
				time.Sleep(time.Duration(second) * time.Second)
				_ = d.d.ChannelMessageDelete(chatid, message.ID)
				//if err != nil { d.log.Println("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ —Å–µ–∫—É–Ω–¥—ã ", err) }
			}()
		} else {
			d.dbase.TimerInsert(message.ID, chatid, 0, 0, second)
		}
	}
}
func (d *Discord) RoleToIdPing(rolePing, guildid string) string {
	//—Å–æ–∑–¥–∞—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
	rolPing := "–∫–∑" + rolePing // –¥–æ–±–∞–≤–ª—è—é –±—É–∫–≤—ã
	if guildid == "" {
		d.log.Panic("–ø–æ—á–µ–º—É —Ç–æ –Ω–µ—Ç –≥—É–∏–ª–¥ –∏–¥")
		panic("–ø–æ—á–µ–º—É —Ç–æ –Ω–µ—Ç –≥—É–∏–ª–¥ –∏–¥")
	}
	g, err := d.d.Guild(guildid)
	if err != nil {
		d.log.Println("–æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≥–∏–ª—å–¥–∏–∏ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–æ–ª–∏", err)
	}
	exist, role := d.roleExists(g, rolPing)
	if !exist {
		//—Å–æ–∑–¥–∞–µ–º —Ä–æ–ª—å –∏ –≤–æ–∑–≤—Ä–∞—à–∞–µ–º –ø–∏–Ω–≥
		role = d.CreateRole(rolPing, guildid)
		return role.Mention()
	} else {
		return role.Mention()
	}
}
func (d *Discord) CreateRole(rolPing, guildid string) *discordgo.Role {
	newRole, err := d.d.GuildRoleCreate(guildid)
	if err != nil {
		d.log.Println("–æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ–π —Ä–æ–ª–∏ ", err)
	}
	role, err := d.d.GuildRoleEdit(guildid, newRole.ID, rolPing, newRole.Color, newRole.Hoist, 37080064, true)
	if err != nil {
		d.log.Println("–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–æ–≤–æ–π —Ä–æ–ª–∏", err)
		err = d.d.GuildRoleDelete(guildid, newRole.ID)
		if err != nil {
			d.log.Println("–æ—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π —Ä–æ–ª–∏ ", err)
		}
	}
	return role
}
func (d *Discord) DeleteMesageSecond(chatid, mesid string, second int) {
	if second > 60 {
		d.dbase.TimerInsert(mesid, chatid, 0, 0, second)
	} else {
		go func() {
			time.Sleep(time.Duration(second) * time.Second)
			d.d.ChannelMessageDelete(chatid, mesid)
		}()
	}
}
func (d *Discord) EditComplex(dsmesid, dschatid string, Embeds discordgo.MessageEmbed) {
	_, _ = d.d.ChannelMessageEditComplex(&discordgo.MessageEdit{
		Content: &mesContentNil,
		Embed:   &Embeds,
		ID:      dsmesid,
		Channel: dschatid,
	})
	//if err != nil { d.log.Println("–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è ", err) }
}
func (d *Discord) BotName() string { //–ø–æ–ª—É—á–∞–µ–º –∏–º—è –±–æ—Ç–∞
	u, err := d.d.User("@me")
	if err != nil {
		d.log.Println("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–º–µ–Ω–∏ –±–æ—Ç–∞", err)
	}
	return u.Username
}
func (d *Discord) SendComplexContent(chatid, text string) string { //–æ—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
	mesCompl, err := d.d.ChannelMessageSendComplex(chatid, &discordgo.MessageSend{
		Content: text})
	if err != nil {
		d.log.Println("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è ", err)
	}
	return mesCompl.ID
}
func (d *Discord) SendComplex(chatid string, embeds discordgo.MessageEmbed) string { //–æ—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
	mesCompl, err := d.d.ChannelMessageSendComplex(chatid, &discordgo.MessageSend{
		Content: mesContentNil,
		Embed:   &embeds,
	})
	if err != nil {
		d.log.Println("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è ", err)
	}
	return mesCompl.ID
}
func (d *Discord) Send(chatid, text string) string { //–æ—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞
	message, err := d.d.ChannelMessageSend(chatid, text)
	if err != nil {
		d.log.Println("–æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ–∫—Å—Ç–∞ ", err)
	}
	return message.ID
}
func (d *Discord) Subscribe(nameid, argRoles, guildid string) string {
	g, err := d.d.State.Guild(guildid)
	if err != nil {
		d.log.Println("–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Å—Ç–∞—Ç–µ.–≥—É–∏–ª–¥,—á–∏—Ç–∞—é –≥—É–∏–ª–¥", err)
		g, err = d.d.Guild(guildid)
		if err != nil {
			d.log.Println("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –≥—É–∏–ª–¥ ... –ø–∞–Ω–∏–∫–æ–≤–∞—Ç—å ", err)
		}
	}

	exist, role := d.roleExists(g, argRoles)

	if !exist { //–µ—Å–ª–∏ –Ω–µ—Ç —Ä–æ–ª–∏
		role = d.CreateRole(argRoles, guildid)
	}

	member, err := d.d.GuildMember(guildid, nameid)
	if err != nil {
		d.log.Println("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—É–∏–ª–¥", err)
	}
	var subscribe int = 0
	if exist {
		for _, _role := range member.Roles {
			if _role == role.ID {
				subscribe = 1
			}
		}
	}

	err = d.d.GuildMemberRoleAdd(guildid, nameid, role.ID)
	if err != nil {
		d.log.Println("–û—à–∏–±–∫–∞ –≤—ã–¥–∞—á–∏ —Ä–æ–ª–∏ ", err)
		subscribe = 2
	}
	var text string
	if subscribe == 0 {
		text = fmt.Sprintf("%s –¢–µ–ø–µ—Ä—å –≤—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ %s", member.Mention(), role.Name)
	} else if subscribe == 1 {
		text = fmt.Sprintf("%s –í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ %s", member.Mention(), role.Name)
	} else if subscribe == 2 {
		text = "–æ—à–∏–±–∫–∞: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–¥–∞—á–∏ —Ä–æ–ª–∏ " + role.Name
	}
	return text
}
func (d *Discord) Unsubscribe(nameid, argRoles, guildid string) string {
	var unsubscribe int = 0
	g, err := d.d.State.Guild(guildid)
	if err != nil {
		d.log.Println("–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Å—Ç–∞—Ç–µ.–≥—É–∏–ª–¥,—á–∏—Ç–∞—é –≥—É–∏–ª–¥", err)
		g, err = d.d.Guild(guildid)
		if err != nil {
			d.log.Println("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –≥—É–∏–ª–¥ ... –ø–∞–Ω–∏–∫–æ–≤–∞—Ç—å ", err)
		}
	}

	exist, role := d.roleExists(g, argRoles)
	if !exist { //–µ—Å–ª–∏ –Ω–µ—Ç —Ä–æ–ª–∏
		unsubscribe = 1
	}

	member, err := d.d.GuildMember(guildid, nameid)
	if err != nil {
		d.log.Println("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—É–∏–ª–¥", err)
	}
	if exist {
		for _, _role := range member.Roles {
			if _role == role.ID {
				unsubscribe = 2
			}
		}
	}
	if unsubscribe == 2 {
		err = d.d.GuildMemberRoleRemove(guildid, nameid, role.ID)
		if err != nil {
			d.log.Println("–û—à–∏–±–∫–∞ —Å–Ω—è—Ç–∏—è —Ä–æ–ª–∏ ", err)
			unsubscribe = 3
		}
	}
	text := ""
	if unsubscribe == 0 {
		text = fmt.Sprintf("%s –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —Ä–æ–ª—å %s", member.Mention(), role.Name)
	} else if unsubscribe == 1 {
		text = fmt.Sprintf("%s –†–æ–ª–∏ %s –Ω–µ—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ  ", member.Mention(), argRoles)
	} else if unsubscribe == 2 {
		text = fmt.Sprintf("%s –í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —Ä–æ–ª–∏ %s", member.Mention(), argRoles)
	} else if unsubscribe == 3 {
		text = "–æ—à–∏–±–∫–∞: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —Å–Ω—è—Ç–∏—è —Ä–æ–ª–∏  " + role.Name
	}
	return text
}
func (d *Discord) EditMessage(chatID, messageID, content string) {
	_, err := d.d.ChannelMessageEdit(chatID, messageID, content)
	if err != nil {
		d.log.Println("–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–∫—Å–∞ —Å–æ–æ–±—â–µ–Ω–∏—è ", err)
	}
}
func (d *Discord) SendEmbedTime(chatid, text string) string { //–æ—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ —Å –¥–≤—É–º—è —Ä–µ–∞–∫—Ü–∏—è–º–∏
	message, err := d.d.ChannelMessageSend(chatid, text)
	if err != nil {
		d.log.Println("–æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ–∫—Å—Ç–∞ ", err)
	}
	err = d.d.MessageReactionAdd(chatid, message.ID, emPlus)
	if err != nil {
		d.log.Println("–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —ç–º–æ–¥–∂–∏ ", emPlus, err)
	}
	err = d.d.MessageReactionAdd(chatid, message.ID, emMinus)
	if err != nil {
		d.log.Println("–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —ç–º–æ–¥–∂–∏ ", emMinus, err)
	}
	return message.ID
}
